@model BookingServices.Models.ProviderDataVM

@{
    ViewData["Title"] = "Profile";
    Layout = "~/Views/Shared/_LayoutProvider.cshtml";
}

<head>
	<link href="~/css/withdraw.css" rel="stylesheet" />
</head>

<div id="loadingOverlay">
    <div class="loading-message">Loading...</div>
</div>

  <div id="message"></div>  

@{
     // if (TempData["SuccessMessage"] != null)
     // {
     //     <h1> IN IF</h1>
     //     <div class="alert alert-success">
     //         @TempData["SuccessMessage"]
     //     </div>
     // }
     // if (TempData["ErrorMessage"] != null)
     // {
     //     <div class="alert alert-danger">
     //         @TempData["ErrorMessage"]
     //     </div>
     // }
 }

<div class="container my-5">
    <h1 class="text-center head-color">Profile</h1>
    @* Balance *@ 
    <div class="container-fluid bg-light border border-dark rounded p-4">
        <input type="hidden" id="serviceProviderEmail" value="@Model.BankAccount" />
        <input type="hidden" id="totalAmount" value="@Model.Balance" />
        <div class="row text-center mb-4">
            <div class="col">
                <h5>Money can be withdrawn</h5>
                <span id="balanceDisplay"> @Html.DisplayFor(model => model.Balance) </span>
            </div>
            <div class="col">
                <h5>Pending Balance</h5>
                <p>@Html.DisplayFor(model => model.ReservedBalance) $</p>
            </div>
            <div class="col">
                <h5>Total Balance</h5>
                <span id="totalBalanceDisplay"> @(Model.Balance + Model.ReservedBalance) $ </span>
            </div>
        </div>
        <div class="d-flex justify-content-center align-items-center">
            <p class="mb-0 me-3">You can request your profits from your account by withdrawing from your bank account.</p>
            <button class="btn btn-outline-primary" id="withdrawButton"
            @(Model.Balance > 0 ? "" : "disabled")>
                Withdraw
            </button>
        </div>
    </div>

    @* Static Info *@
    <div class="col-12 mt-3">
        <div class="card p-3">
            <h5 class="card-title">Information</h5>
            <div class="mb-3">
                <i class="fas fa-envelope fa-1x"></i>
                <span class="ms-1">@Model.Email</span>
            </div>
            <div>
                <i class="fas fa-star text-warning"></i>
                <span class="ms-1">3.5</span>
            </div>
        </div>
    </div>
    @* Information *@
    <form asp-action="Edit" method="post">
        @Html.HiddenFor(model => model.ProviderId)

        <div class="col-12 my-2">
            <h5>Name</h5>
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="col-12 my-2">
            <h5>Details</h5>
            @Html.TextAreaFor(m => m.ServiceDetails, new { @class = "form-control", rows = 4 })
            <span asp-validation-for="ServiceDetails" class="text-danger"></span>
        </div>

        <div class="col-12 my-2">
            <h5>Phone</h5>
            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
            <span asp-validation-for="Phone" class="text-danger"></span>
        </div>

        <div class="col-12 my-2">
            <h5>Bank Account</h5>
            @Html.TextBoxFor(m => m.BankAccount, new { @class = "form-control" })
            <span asp-validation-for="BankAccount" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-outline-primary btn-lg w-100">Edit</button>
        <a asp-action="ResetPassword" class="btn btn-outline-secondary btn-lg w-100 mt-3">Change Password</a>
    </form>


</div>


@section Scripts {
	<script src="~/js/profile.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
