// <auto-generated />
using System;
using BookingServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingServices.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240919233012_final")]
    partial class final
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingPackage", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.HasKey("BookingId", "PackageId")
                        .HasName("PK_PackageBook_BookingID");

                    b.HasIndex("PackageId");

                    b.ToTable("BookingPackage", (string)null);
                });

            modelBuilder.Entity("BookingService", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.HasKey("BookingId", "ServiceId")
                        .HasName("PK_ServiceBook_BookingID");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingService", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.AdminContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("ContractId");

                    b.ToTable("AdminContract", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceProviderProviderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ServiceProviderProviderId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentIncomeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentIncomeID");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentIncomeId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.BookingConsultation", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultationID");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookingId", "ConsultationId")
                        .HasName("PK_BookingConsultation_ServiceBook_BookingID");

                    b.HasIndex("ConsultationId");

                    b.ToTable("BookingConsultation", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "Name" }, "Unique_Category_Name")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsultationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ConsultationId");

                    b.ToTable("Consultation", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Customer_Id");

                    b.Property<string>("AlternativePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__8CB286997F739E02");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentIncomeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentIncomeID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6DF630A0B8B8");

                    b.HasIndex("PaymentIncomeId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Link", b =>
                {
                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProviderID");

                    b.Property<int?>("NumberOfClicks")
                        .HasColumnType("int");

                    b.Property<string>("SocialAccount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProviderId")
                        .HasName("PK_Provider_to_Link");

                    b.HasIndex(new[] { "SocialAccount" }, "Unique_SocialAccount")
                        .IsUnique();

                    b.ToTable("Link", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<DateOnly?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PackageStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PercentageForAdmin")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProviderID");

                    b.HasKey("PackageId");

                    b.HasIndex("ProviderId");

                    b.HasIndex(new[] { "PackageName" }, "UQ__Package__73856F7ABD6B7AE1")
                        .IsUnique();

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.PaymentIncome", b =>
                {
                    b.Property<int>("PaymentIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentIncomeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentIncomeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("percentage");

                    b.HasKey("PaymentIncomeId");

                    b.ToTable("PaymentIncome", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.ProviderContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProviderID");

                    b.HasKey("ContractId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderContract", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Review", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("CustomerComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CustomerCommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProviderReplayComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProviderReplayCommentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CustomerId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int?>("AdminContractId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("InitialPaymentPercentage")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentserviceId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderContractId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("ServiceId");

                    b.HasIndex("AdminContractId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentserviceId");

                    b.HasIndex("ProviderContractId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.ServicePrice", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ServiceId", "PriceDate")
                        .HasName("CK_ServiceId_priceDate");

                    b.ToTable("ServicePrice", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.ServiceProvider", b =>
                {
                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ImgSsn")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImgSSN");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(1, 1)")
                        .HasColumnName("rate");

                    b.HasKey("ProviderId");

                    b.ToTable("ServiceProvider", (string)null);
                });

            modelBuilder.Entity("BookingServices.Data.UserMessage", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MsgID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MsgId"));

                    b.Property<DateTime?>("DateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReceiverID");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SenderID");

                    b.HasKey("MsgId");

                    b.ToTable("UserMessage", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PackageService", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.HasKey("PackageId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageService", (string)null);
                });

            modelBuilder.Entity("BookingPackage", b =>
                {
                    b.HasOne("BookingServices.Data.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingID_PackageBook");

                    b.HasOne("BookingServices.Data.Package", null)
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Package_PackageBook");
                });

            modelBuilder.Entity("BookingService", b =>
                {
                    b.HasOne("BookingServices.Data.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingID_ServiceBook");

                    b.HasOne("BookingServices.Data.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Service_ServiceBook");
                });

            modelBuilder.Entity("BookingServices.Data.ApplicationUser", b =>
                {
                    b.HasOne("BookingServices.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServices.Data.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("BookingServices.Data.Booking", b =>
                {
                    b.HasOne("BookingServices.Data.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Booking");

                    b.HasOne("BookingServices.Data.PaymentIncome", "PaymentIncome")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentIncomeId")
                        .IsRequired()
                        .HasConstraintName("FK_PaymentIncome_Booking");

                    b.Navigation("Customer");

                    b.Navigation("PaymentIncome");
                });

            modelBuilder.Entity("BookingServices.Data.BookingConsultation", b =>
                {
                    b.HasOne("BookingServices.Data.Booking", "Booking")
                        .WithMany("BookingConsultations")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingConsultation_BookingID_ServiceBook");

                    b.HasOne("BookingServices.Data.Consultation", "Consultation")
                        .WithMany("BookingConsultations")
                        .HasForeignKey("ConsultationId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingConsultation_Service_ServiceBook");

                    b.Navigation("Booking");

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("BookingServices.Data.Customer", b =>
                {
                    b.HasOne("BookingServices.Data.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("BookingServices.Data.Customer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BookingServices.Data.Discount", b =>
                {
                    b.HasOne("BookingServices.Data.PaymentIncome", "PaymentIncome")
                        .WithMany("Discounts")
                        .HasForeignKey("PaymentIncomeId")
                        .HasConstraintName("FK_Discount_To_PaymentIncome");

                    b.Navigation("PaymentIncome");
                });

            modelBuilder.Entity("BookingServices.Data.Link", b =>
                {
                    b.HasOne("BookingServices.Data.ServiceProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceProvider_To_Link");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingServices.Data.Package", b =>
                {
                    b.HasOne("BookingServices.Data.ServiceProvider", "Provider")
                        .WithMany("Packages")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Package_Provider");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingServices.Data.Payment", b =>
                {
                    b.HasOne("BookingServices.Data.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Booking");

                    b.HasOne("BookingServices.Data.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Customer");

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingServices.Data.ProviderContract", b =>
                {
                    b.HasOne("BookingServices.Data.ServiceProvider", "Provider")
                        .WithMany("ProviderContracts")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_ServiceProvider_ProviderContract");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingServices.Data.Review", b =>
                {
                    b.HasOne("BookingServices.Data.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_ReviewBooking");

                    b.HasOne("BookingServices.Data.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ReviewCustomer");

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingServices.Data.Service", b =>
                {
                    b.HasOne("BookingServices.Data.AdminContract", "AdminContract")
                        .WithMany("Services")
                        .HasForeignKey("AdminContractId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AdminContract_To_Service");

                    b.HasOne("BookingServices.Data.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Category_To_Service");

                    b.HasOne("BookingServices.Data.Service", "Parentservice")
                        .WithMany("InverseParentservice")
                        .HasForeignKey("ParentserviceId")
                        .HasConstraintName("FK_Service_To_Service");

                    b.HasOne("BookingServices.Data.ProviderContract", "ProviderContract")
                        .WithMany("Services")
                        .HasForeignKey("ProviderContractId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ProviderContract_To_Service");

                    b.HasOne("BookingServices.Data.ServiceProvider", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_ServiceProvider_To_Service");

                    b.Navigation("AdminContract");

                    b.Navigation("Category");

                    b.Navigation("Parentservice");

                    b.Navigation("Provider");

                    b.Navigation("ProviderContract");
                });

            modelBuilder.Entity("BookingServices.Data.ServicePrice", b =>
                {
                    b.HasOne("BookingServices.Data.Service", "Service")
                        .WithMany("ServicePrices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Service_ServicePrice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BookingServices.Data.ServiceProvider", b =>
                {
                    b.HasOne("BookingServices.Data.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("BookingServices.Data.ServiceProvider", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookingServices.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookingServices.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServices.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookingServices.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PackageService", b =>
                {
                    b.HasOne("BookingServices.Data.Package", null)
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PackageService_Package");

                    b.HasOne("BookingServices.Data.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PackageService_Service");
                });

            modelBuilder.Entity("BookingServices.Data.AdminContract", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingServices.Data.Booking", b =>
                {
                    b.Navigation("BookingConsultations");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookingServices.Data.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingServices.Data.Consultation", b =>
                {
                    b.Navigation("BookingConsultations");
                });

            modelBuilder.Entity("BookingServices.Data.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookingServices.Data.PaymentIncome", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("BookingServices.Data.ProviderContract", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingServices.Data.Service", b =>
                {
                    b.Navigation("InverseParentservice");

                    b.Navigation("ServicePrices");
                });

            modelBuilder.Entity("BookingServices.Data.ServiceProvider", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("ProviderContracts");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
